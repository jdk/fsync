#!/bin/bash

# Original from location - work path
# -Path to sync from
WORK_PATH="/net/hq-vault.local/volume2/src"
# -server to ping, used to detirmine location
WORK_SERV=hq-vault.local

# Destination path at home
SERV_PATH="/net/vault.local/volume1/src"
# -server to ping, used to detirmine location
HOME_SERV=vault.local

# Local computer configuration
# --home for synced files
LOCL_PATH="${HOME}/.fsync/staging"
# --exclude list location
EXCL_FILE="${HOME}/.fsync/exclude-list.txt"
# --logging file
LOG_FILE="${HOME}/.fsync/fsync.log"

log ()
{
    DATE=$(date +"%b_%d_%Y_%s")
    echo "${DATE} :: $1" | tee -a ${LOG_FILE}
}

flirc_sync () 
{
	HOSTOS=$(uname -s)

	if [ ! -f ${EXCL_FILE} ]; then
		log "warning: exclude file: ${EXCL_FILE} not present, creating"
		touch ${EXCL_FILE}
	fi

	# Check if source directory exists
	if [ ! -d "${WORK_PATH}" ]; then
		log "error: src directory: ${WORK_PATH} does not exist"
		exit
	fi

	# Check if local directory exists
	if [ ! -d "${LOCL_PATH}" ]; then
		log "error: dest directory: ${LOCL_PATH} does not exist"
		exit
	fi

	# Create a Temporary Directory Name
	if [ "$HOSTOS" == "Darwin" ]; then
    	TMPDIR=$(mktemp -d -t fsync)
	else
    	TMPDIR=$(mktemp -d --tmpdir fsync.XXXXXX)
	fi
	if [ -n "$TMPDIR" ]; then
    	trap "rm -rf $TMPDIR" EXIT
	fi

	# Cache before in case we have a change before sync
	find ${WORK_PATH} -type f | sed -e "s,${WORK_PATH}/,,g" > ${TMPDIR}/cache_temp.txt
	rsync -azPv --exclude-from=${EXCL_FILE} ${WORK_PATH}/ ${LOCL_PATH}
	if [ "$?" -ne "0" ]
	then
		log "error: failed to sync from ${WORK_PATH} to ${LOCL_PATH}"
		exit
	fi

	# We succeed, put cache in our exclude and remove dups
	log "debug: updating exclude file"
	cat ${TMPDIR}/cache_temp.txt ${EXCL_FILE} > ${TMPDIR}/cache_temp2.txt
	awk '!a[$0]++' ${TMPDIR}/cache_temp2.txt  > ${EXCL_FILE}

	# Cleanup temp files
	log "debug: cleanup"
	rm -fR ${TMPDIR}

	log "success"
	exit
}

home_sync ()
{
	# Check if source directory exists
	if [ ! -d "${LOCL_PATH}" ]; then
		log "error: src directory: ${LOCL_PATH} does not exist"
		exit
	fi

	# Check if local directory exists
	if [ ! -d "${SERV_PATH}" ]; then
		log "error: dest directory: ${SERV_PATH} does not exist"
		exit
	fi

	# Create a lock file
	touch "${HOME}/.fsync/lock"

	# Cache before in case we have a change before sync
	rsync -r -z -c -v ${LOCL_PATH}/ ${SERV_PATH}
	if [ "$?" -ne "0" ]
	then
		log "error: failed to sync from ${LOCL_PATH} to ${SERV_PATH}"
		exit
	fi

	# check to see if lock file present
	if [ -f "${HOME}/.fsync/lock" ];
	then
		log "error: lock file present, need to finish syncing from work"
		exit
	fi

	# We succeed, clear out our local sync directory
	log "debug: removing local files"
	rm -fR ${LOCL_PATH}/*
	rm "${HOME}/.fsync/lock"

	log "success"
	exit
}


if [ -z "${WORK_PATH}" ];
then
	log "error: need to set WORK_PATH variable, path to sync from"
fi

if [ -z "${WORK_SERV}" ];
then
	log "error: need to set WORK_SERV variable, used to detect location"
fi

if [ -z "${SERV_PATH}" ];
then
	log "error: need to set SERV_PATH variable, path to sync to"
fi

if [ -z "${HOME_SERV}" ];
then
	log "error: need to set HOME_SERV variable, used to detect location"
fi

if [ -z "${LOCL_PATH}" ];
then
	log "error: need to set LOCL_PATH variable, staging sync area on your comp"
fi

if [ -z "${EXCL_FILE}" ];
then
	log "error: need to set EXCL_FILE variable, successfully synced files"
fi

if [ -z "${LOG_FILE}" ];
then
	log "error: need to set LOG_FILE variable, file to log syncs"
fi

ping -c1 -W1 ${HOME_SERV}
if [ "$?" -eq "0" ]
then
	log "debug: SERVER NAME:  ${HOME_SERV}"
	home_sync
fi

ping -c1 -W1 ${WORK_SERV}
if [ "$?" -eq "0" ]
then
	log "debug: SERVER NAME:  ${WORK_SERV}"
	flirc_sync
fi
